// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/5-say/go-tool/gin/jwtx/db/dao/model"
)

func newJwtxToken(db *gorm.DB, opts ...gen.DOOption) jwtxToken {
	_jwtxToken := jwtxToken{}

	_jwtxToken.jwtxTokenDo.UseDB(db, opts...)
	_jwtxToken.jwtxTokenDo.UseModel(&model.JwtxToken{})

	tableName := _jwtxToken.jwtxTokenDo.TableName()
	_jwtxToken.ALL = field.NewAsterisk(tableName)
	_jwtxToken.ID = field.NewUint64(tableName, "id")
	_jwtxToken.AccountID = field.NewUint64(tableName, "account_id")
	_jwtxToken.LoginGroup = field.NewString(tableName, "login_group")
	_jwtxToken.LoginTerminal = field.NewString(tableName, "login_terminal")
	_jwtxToken.MakeTokenIP = field.NewString(tableName, "make_token_ip")
	_jwtxToken.CreatedAt = field.NewTime(tableName, "created_at")
	_jwtxToken.LastRefreshAt = field.NewTime(tableName, "last_refresh_at")
	_jwtxToken.FinalRefreshAt = field.NewTime(tableName, "final_refresh_at")
	_jwtxToken.ExpirationAt = field.NewTime(tableName, "expiration_at")

	_jwtxToken.fillFieldMap()

	return _jwtxToken
}

// jwtxToken jwtx token 信息表
type jwtxToken struct {
	jwtxTokenDo jwtxTokenDo

	ALL            field.Asterisk
	ID             field.Uint64 // token ID
	AccountID      field.Uint64 // 账户 ID
	LoginGroup     field.String // 登录的分组
	LoginTerminal  field.String // 登录的终端
	MakeTokenIP    field.String // 首次请求生成 token 的 IP 地址
	CreatedAt      field.Time   // 创建时间
	LastRefreshAt  field.Time   // 上次的刷新时间
	FinalRefreshAt field.Time   // 最后的刷新时间
	ExpirationAt   field.Time   // 过期时间

	fieldMap map[string]field.Expr
}

func (j jwtxToken) Table(newTableName string) *jwtxToken {
	j.jwtxTokenDo.UseTable(newTableName)
	return j.updateTableName(newTableName)
}

func (j jwtxToken) As(alias string) *jwtxToken {
	j.jwtxTokenDo.DO = *(j.jwtxTokenDo.As(alias).(*gen.DO))
	return j.updateTableName(alias)
}

func (j *jwtxToken) updateTableName(table string) *jwtxToken {
	j.ALL = field.NewAsterisk(table)
	j.ID = field.NewUint64(table, "id")
	j.AccountID = field.NewUint64(table, "account_id")
	j.LoginGroup = field.NewString(table, "login_group")
	j.LoginTerminal = field.NewString(table, "login_terminal")
	j.MakeTokenIP = field.NewString(table, "make_token_ip")
	j.CreatedAt = field.NewTime(table, "created_at")
	j.LastRefreshAt = field.NewTime(table, "last_refresh_at")
	j.FinalRefreshAt = field.NewTime(table, "final_refresh_at")
	j.ExpirationAt = field.NewTime(table, "expiration_at")

	j.fillFieldMap()

	return j
}

func (j *jwtxToken) WithContext(ctx context.Context) *jwtxTokenDo {
	return j.jwtxTokenDo.WithContext(ctx)
}

func (j jwtxToken) TableName() string { return j.jwtxTokenDo.TableName() }

func (j jwtxToken) Alias() string { return j.jwtxTokenDo.Alias() }

func (j jwtxToken) Columns(cols ...field.Expr) gen.Columns { return j.jwtxTokenDo.Columns(cols...) }

func (j *jwtxToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := j.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (j *jwtxToken) fillFieldMap() {
	j.fieldMap = make(map[string]field.Expr, 9)
	j.fieldMap["id"] = j.ID
	j.fieldMap["account_id"] = j.AccountID
	j.fieldMap["login_group"] = j.LoginGroup
	j.fieldMap["login_terminal"] = j.LoginTerminal
	j.fieldMap["make_token_ip"] = j.MakeTokenIP
	j.fieldMap["created_at"] = j.CreatedAt
	j.fieldMap["last_refresh_at"] = j.LastRefreshAt
	j.fieldMap["final_refresh_at"] = j.FinalRefreshAt
	j.fieldMap["expiration_at"] = j.ExpirationAt
}

func (j jwtxToken) clone(db *gorm.DB) jwtxToken {
	j.jwtxTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return j
}

func (j jwtxToken) replaceDB(db *gorm.DB) jwtxToken {
	j.jwtxTokenDo.ReplaceDB(db)
	return j
}

type jwtxTokenDo struct{ gen.DO }

func (j jwtxTokenDo) Debug() *jwtxTokenDo {
	return j.withDO(j.DO.Debug())
}

func (j jwtxTokenDo) WithContext(ctx context.Context) *jwtxTokenDo {
	return j.withDO(j.DO.WithContext(ctx))
}

func (j jwtxTokenDo) ReadDB() *jwtxTokenDo {
	return j.Clauses(dbresolver.Read)
}

func (j jwtxTokenDo) WriteDB() *jwtxTokenDo {
	return j.Clauses(dbresolver.Write)
}

func (j jwtxTokenDo) Session(config *gorm.Session) *jwtxTokenDo {
	return j.withDO(j.DO.Session(config))
}

func (j jwtxTokenDo) Clauses(conds ...clause.Expression) *jwtxTokenDo {
	return j.withDO(j.DO.Clauses(conds...))
}

func (j jwtxTokenDo) Returning(value interface{}, columns ...string) *jwtxTokenDo {
	return j.withDO(j.DO.Returning(value, columns...))
}

func (j jwtxTokenDo) Not(conds ...gen.Condition) *jwtxTokenDo {
	return j.withDO(j.DO.Not(conds...))
}

func (j jwtxTokenDo) Or(conds ...gen.Condition) *jwtxTokenDo {
	return j.withDO(j.DO.Or(conds...))
}

func (j jwtxTokenDo) Select(conds ...field.Expr) *jwtxTokenDo {
	return j.withDO(j.DO.Select(conds...))
}

func (j jwtxTokenDo) Where(conds ...gen.Condition) *jwtxTokenDo {
	return j.withDO(j.DO.Where(conds...))
}

func (j jwtxTokenDo) Order(conds ...field.Expr) *jwtxTokenDo {
	return j.withDO(j.DO.Order(conds...))
}

func (j jwtxTokenDo) Distinct(cols ...field.Expr) *jwtxTokenDo {
	return j.withDO(j.DO.Distinct(cols...))
}

func (j jwtxTokenDo) Omit(cols ...field.Expr) *jwtxTokenDo {
	return j.withDO(j.DO.Omit(cols...))
}

func (j jwtxTokenDo) Join(table schema.Tabler, on ...field.Expr) *jwtxTokenDo {
	return j.withDO(j.DO.Join(table, on...))
}

func (j jwtxTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) *jwtxTokenDo {
	return j.withDO(j.DO.LeftJoin(table, on...))
}

func (j jwtxTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) *jwtxTokenDo {
	return j.withDO(j.DO.RightJoin(table, on...))
}

func (j jwtxTokenDo) Group(cols ...field.Expr) *jwtxTokenDo {
	return j.withDO(j.DO.Group(cols...))
}

func (j jwtxTokenDo) Having(conds ...gen.Condition) *jwtxTokenDo {
	return j.withDO(j.DO.Having(conds...))
}

func (j jwtxTokenDo) Limit(limit int) *jwtxTokenDo {
	return j.withDO(j.DO.Limit(limit))
}

func (j jwtxTokenDo) Offset(offset int) *jwtxTokenDo {
	return j.withDO(j.DO.Offset(offset))
}

func (j jwtxTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *jwtxTokenDo {
	return j.withDO(j.DO.Scopes(funcs...))
}

func (j jwtxTokenDo) Unscoped() *jwtxTokenDo {
	return j.withDO(j.DO.Unscoped())
}

func (j jwtxTokenDo) Create(values ...*model.JwtxToken) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Create(values)
}

func (j jwtxTokenDo) CreateInBatches(values []*model.JwtxToken, batchSize int) error {
	return j.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (j jwtxTokenDo) Save(values ...*model.JwtxToken) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Save(values)
}

func (j jwtxTokenDo) First() (*model.JwtxToken, error) {
	if result, err := j.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.JwtxToken), nil
	}
}

func (j jwtxTokenDo) Take() (*model.JwtxToken, error) {
	if result, err := j.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.JwtxToken), nil
	}
}

func (j jwtxTokenDo) Last() (*model.JwtxToken, error) {
	if result, err := j.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.JwtxToken), nil
	}
}

func (j jwtxTokenDo) Find() ([]*model.JwtxToken, error) {
	result, err := j.DO.Find()
	return result.([]*model.JwtxToken), err
}

func (j jwtxTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.JwtxToken, err error) {
	buf := make([]*model.JwtxToken, 0, batchSize)
	err = j.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (j jwtxTokenDo) FindInBatches(result *[]*model.JwtxToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return j.DO.FindInBatches(result, batchSize, fc)
}

func (j jwtxTokenDo) Attrs(attrs ...field.AssignExpr) *jwtxTokenDo {
	return j.withDO(j.DO.Attrs(attrs...))
}

func (j jwtxTokenDo) Assign(attrs ...field.AssignExpr) *jwtxTokenDo {
	return j.withDO(j.DO.Assign(attrs...))
}

func (j jwtxTokenDo) Joins(fields ...field.RelationField) *jwtxTokenDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Joins(_f))
	}
	return &j
}

func (j jwtxTokenDo) Preload(fields ...field.RelationField) *jwtxTokenDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Preload(_f))
	}
	return &j
}

func (j jwtxTokenDo) FirstOrInit() (*model.JwtxToken, error) {
	if result, err := j.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.JwtxToken), nil
	}
}

func (j jwtxTokenDo) FirstOrCreate() (*model.JwtxToken, error) {
	if result, err := j.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.JwtxToken), nil
	}
}

func (j jwtxTokenDo) FindByPage(offset int, limit int) (result []*model.JwtxToken, count int64, err error) {
	result, err = j.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = j.Offset(-1).Limit(-1).Count()
	return
}

func (j jwtxTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = j.Count()
	if err != nil {
		return
	}

	err = j.Offset(offset).Limit(limit).Scan(result)
	return
}

func (j jwtxTokenDo) Scan(result interface{}) (err error) {
	return j.DO.Scan(result)
}

func (j jwtxTokenDo) Delete(models ...*model.JwtxToken) (result gen.ResultInfo, err error) {
	return j.DO.Delete(models)
}

func (j *jwtxTokenDo) withDO(do gen.Dao) *jwtxTokenDo {
	j.DO = *do.(*gen.DO)
	return j
}
